#!/usr/bin/env python3

"""
jobhist

View compact history of jobs

This script requires:
  - Python 3.10+ (for the zip() strict = True option)
  - Slurm (any recent version should work)
  - Slurm configured with:
    - JobAcctGatherType=jobacct_gather/linux or jobacct_gather/cgroup

Notes:
  - Based on output from sacct
  - Default time period is past day
  - State filter is based on current job state
"""

from datetime import datetime, timedelta
import argparse
import os
import re
import subprocess
import sys

# Set up arguments and options
parser = argparse.ArgumentParser(
    prog = "jobhist",
    formatter_class = argparse.RawDescriptionHelpFormatter,
    description = "View compact history of jobs",
    epilog = """\
examples:

jobhist
jobhist --me
jobhist -s 2024-07-01
jobhist -s 2024-07-01 -e 2024-07-02
jobhist -u ttrojan
jobhist -p largemem
jobhist -u ttrojan -p main
jobhist -u ttrojan -s 2024-07-01 -p gpu
jobhist -a ttrojan_123
jobhist -n sim2
jobhist -w a01-[01-20]
jobhist -t failed

notes:

default time period is past day
state filter is based on current job state
to view more job details, run jobinfo <jobid>

support:

https://github.com/uschpc/slurm-tools/issues"""
)
parser.add_argument(
    "-a",
    "--account",
    help = "account to query for history (comma-separated list)"
)
parser.add_argument(
    "-e",
    "--end",
    help = "end date to query for history (YYYY-MM-DD)"
)
parser.add_argument(
    "--me",
    action = "store_true",
    help = "query own jobs"
)
parser.add_argument(
    "-n",
    "--name",
    help = "job name to query for history (comma-separated list)"
)
parser.add_argument(
    "-w",
    "--nodelist",
    help = "node list to query for history (range or comma-separated list)"
)
parser.add_argument(
    "-p",
    "--partition",
    help = "partition to query for history (comma-separated list)"
)
parser.add_argument(
    "-q",
    "--qos",
    help = "QOS to query for history (comma-separated list)"
)
parser.add_argument(
    "-r",
    "--reason",
    help = "last pending reason to query for history (excluding resources and priority) (comma-separated list)"
)
parser.add_argument(
    "-s",
    "--start",
    help = "start date to query for history (YYYY-MM-DD)"
)
parser.add_argument(
    "-t",
    "--state",
    help = "current job state to query for history (comma-separated list)"
)
parser.add_argument(
    "-u",
    "--user",
    help = "user to query for history (comma-separated list)"
)
parser.add_argument(
    "-V",
    "--version",
    action = "store_true",
    help = "print version"
)
args = parser.parse_args()

if args.version:
    print("jobhist 2.3.0")
    sys.exit(0)

def mem_to_gib(mem):
    """
    Convert memory value to GiB

    # Arguments
    - mem: str for memory value

    # Returns
    - str: memory value in GiB
    - None: if unit not found
    """
    v = float(mem[:-1])
    if mem.endswith("T"):
        return str(int(v * 1024)) + "G"
    if mem.endswith("G"):
        return str(int(v)) + "G"
    if mem.endswith("M"):
        return str(int(v / 1024)) + "G"
    if mem.endswith("K"):
        return str(int(v / 1024 / 1024)) + "G"
    return None

def get_job_info(f, v):
    """
    Parse and derive job info values

    # Arguments
    - f: str of job info fields used for sacct -o
    - v: str of job info values from sacct -X -P output

    # Returns
    - dict: job info key-value pairs

    # Notes
    - Assumes sacct -X -P -o options are used
    - Assumes certain fields are present: state,reqtres,alloctres
    """
    # Create dict from keys and values
    keys = f.split(",")
    values = v.split("|")
    d = dict(zip(keys, values, strict = True))
    # Replace state CANCELLED by ... with just CANCELLED
    if "CANCELLED" in d["state"]:
        d["state"] = "CANCELLED"
    # Get requested nodes
    d["reqnodes"] = re.search(r"node=([0-9]+)", d["reqtres"]).group(1)
    # Get requested CPUs
    d["reqcpus"] = re.search(r"cpu=([0-9]+)", d["reqtres"]).group(1)
    # Get requested memory (may be in varying units)
    d["reqmem"] = re.search(r"mem=([0-9]+.[0-9]+[A-Z]|[0-9]+[A-Z])", d["reqtres"]).group(1)
    d["reqmem"] = mem_to_gib(d["reqmem"])
    # alloctres may be empty in some cases (e.g., job is cancelled before resources are allocated)
    if d["alloctres"] == "":
        d["allocnodes"] = "--"
        d["alloccpus"] = "--"
        d["allocmem"] = "--"
    else:
        # Get allocated nodes
        d["allocnodes"] = re.search(r"node=([0-9]+)", d["alloctres"]).group(1)
        # Get allocated CPUs
        d["alloccpus"] = re.search(r"cpu=([0-9]+)", d["alloctres"]).group(1)
        # Get allocated memory (may be in varying units)
        d["allocmem"] = re.search(r"mem=([0-9]+.[0-9]+[A-Z]|[0-9]+[A-Z])", d["alloctres"]).group(1)
        d["allocmem"] = mem_to_gib(d["allocmem"])
    return d

fields = "jobid,start,user,jobname,partition,state,elapsed,reqtres,alloctres"
cmd = ["sacct", "-a", "-X", "-n", "-P", "-o", fields]

tday = datetime.today()
yday = tday - timedelta(days = 1)
tday = tday.strftime("%Y-%m-%d")
yday = yday.strftime("%Y-%m-%d")

if args.start is not None and args.end is not None:
    cmd = cmd + ["-S", args.start, "-E", args.end]
elif args.start is not None and args.end is None:
    cmd = cmd + ["-S", args.start, "-E", tday]
elif args.start is None and args.end is not None:
    print("Error: no start date given", file = sys.stderr)
    sys.exit(1)
else:
    cmd = cmd + ["-S", yday, "-E", tday]
if args.account is not None:
    cmd = cmd + ["-A", args.account]
if args.me:
    cmd = cmd + ["-u", os.environ["USER"]]
if args.name is not None:
    cmd = cmd + ["--name", args.name]
if args.nodelist is not None:
    cmd = cmd + ["-N", args.nodelist]
if args.partition is not None:
    cmd = cmd + ["-r", args.partition]
if args.qos is not None:
    cmd = cmd + ["-q", args.qos]
if args.reason is not None:
    cmd = cmd + ["--reason", args.reason]
if args.user is not None:
    cmd = cmd + ["-u", args.user]

proc = subprocess.run(cmd, env = {"SLURM_TIME_FORMAT":"%Y-%m-%d"}, capture_output = True, text = True)
joblist = proc.stdout.split("\n")[:-1]
# sacct filters job state over the given time period, which could be multiple states
# Filter based on current job state instead
if args.state is not None:
    states = args.state.upper().replace(",", "|")
    joblist = [job for job in joblist if re.search(states, job.split("|")[5])]

print("----------------------------------------------------------------------------------------------------")
print("Job ID         Startdate       User     Job Name  Partition      State     Elapsed Nodes CPUs Memory")
print("------------- ---------- ---------- ------------ ---------- ---------- ----------- ----- ---- ------")
for job in joblist:
    info = get_job_info(fields, job)
    # Print requested resources in some cases
    if (info["state"] == "PENDING"
        # Job cancelled before resources are allocated
        or (info["state"] == "CANCELLED" and info["alloctres"] == "")
        # Job submission failed (e.g., requested node configuration is not available)
        or (info["state"] == "FAILED" and info["start"] == "None")):
        print(f"{info['jobid'][:13]:<13}"
              + " " + f"{info['start'][:10]:>10}"
              + " " + f"{info['user'][:10]:>10}"
              + " " + f"{info['jobname'][:12].strip():>12}"
              + " " + f"{info['partition'][:10]:>10}"
              + " " + f"{info['state'][:10]:>10}"
              + " " + f"{info['elapsed'][:11]:>11}"
              + " " + f"{info['reqnodes'][:5]:>5}"
              + " " + f"{info['reqcpus'][:4]:>4}"
              + " " + f"{info['reqmem'][:6]:>6}")
    # Print allocated resources in all other cases
    else:
        print(f"{info['jobid'][:13]:<13}"
              + " " + f"{info['start'][:10]:>10}"
              + " " + f"{info['user'][:10]:>10}"
              + " " + f"{info['jobname'][:12].strip():>12}"
              + " " + f"{info['partition'][:10]:>10}"
              + " " + f"{info['state'][:10].strip():>10}"
              + " " + f"{info['elapsed'][:11]:>11}"
              + " " + f"{info['allocnodes'][:5]:>5}"
              + " " + f"{info['alloccpus'][:4]:>4}"
              + " " + f"{info['allocmem'][:6]:>6}")
