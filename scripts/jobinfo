#!/usr/bin/env python3

"""
jobinfo

View detailed job information

This script requires:
  - Python 3.10+ (for the zip() strict = True option)
  - Slurm 23.02+ (for the sacct field "planned")
  - Slurm configured with:
    - Job accounting (required): JobAcctGatherType=jobacct_gather/linux or jobacct_gather/cgroup
    - GPU gres (optional): GresTypes=gpu
    - GPU accounting (optional): AccountingStorageTRES=gres/gpu

Notes:
  - Based on output from sacct, squeue, and sstat
  - Starting with Slurm 23.02, the sacct field "reserved" was renamed to "planned"
"""

import argparse
import math
import os
import re
import subprocess
import sys

# Set up arguments and options
parser = argparse.ArgumentParser(
    prog = "jobinfo",
    formatter_class = argparse.RawDescriptionHelpFormatter,
    description = "View detailed job information",
    epilog = """\
examples:

jobinfo 123456
jobinfo $SLURM_JOB_ID

notes:

to find job IDs, run jobhist

support:

https://github.com/uschpc/slurm-tools/issues"""
)
parser.add_argument(
    "jobid",
    nargs = "?",
    help = "job ID to query"
)
parser.add_argument(
    "-V",
    "--version",
    action = "store_true",
    help = "print version"
)
args = parser.parse_args()

if args.version:
    print("jobinfo 2.1.0")
    sys.exit(0)

if args.jobid is None:
    print("Error: no job ID provided", file = sys.stderr)
    print("Usage: jobinfo [-h] [-V] [jobid]", file = sys.stderr)
    print("To find job IDs, run jobhist", file = sys.stderr)
    sys.exit(1)

if re.search(r",", args.jobid):
    print("Error: only one job ID is accepted", file = sys.stderr)
    print("Usage: jobinfo [-h] [-V] [jobid]", file = sys.stderr)
    sys.exit(1)

# Define utility functions

def parse_time(x):
    """
    Parse time elements from string

    # Arguments
    - x (str): sacct value for time

    # Returns
    - tuple: days, hours, minutes, seconds

    # Notes
    - Slurm time format is dd-hh:mm:ss.sss
    - Value will at least include mm:ss
    """
    m = re.match(r"(((?P<days>\d+)-)?(?P<hours>\d\d):)?"
                 + r"(?P<minutes>\d\d):(?P<seconds>\d\d(\.\d+)?)", x)
    if m is None:
        return 0, 0, 0, 0.0
    dd = int(m.group("days") or "0")
    hh = int(m.group("hours") or "0")
    mm = int(m.group("minutes"))
    ss = float(m.group("seconds"))
    return dd, hh, mm, ss

def to_seconds(x):
    """
    Convert time to seconds

    # Arguments
    - x (str): sacct value for time

    # Returns
    - float: time in seconds
    """
    dd, hh, mm, ss = parse_time(x)
    return dd*24*60*60 + hh*60*60 + mm*60 + ss

def to_bytes(x):
    """
    Convert string to bytes

    # Arguments
    - x (str): sacct or sstat value for size

    # Returns
    - float: -1.0 (if x is empty)
    - float: size in bytes
    """
    # Some values may be empty if job is RUNNING
    # Return -1.0 for comparison purposes
    if not x:
        return -1.0
    units = {"K": 10, "M": 20, "G": 30, "T": 40, "P": 50, "E": 60}
    scale = 2**units.get(x[-1], 0)
    if scale != 1:
        x = x[:-1]
    return float(x) * scale

# Define selector functions

def first(x, y):
    """
    Select first non-empty value in multi-line output

    # Arguments
    - x (str): first value to compare
    - y (str): second value to compare

    # Returns
    - str: first non-empty value
    """
    return x == "" and y or x

def unique(x, y):
    """
    Select all unique values in multi-line output

    # Arguments
    - x (str): first value to compare
    - y (str): second value to compare

    # Returns
    - str: unique values (separated by /)
    """
    if y in x:
        return x
    return x + " / " + y

def max_time(x, y):
    """
    Select max time value in multi-line output

    # Arguments
    - x (str): first value to compare
    - y (str): second value to compare

    # Returns
    - str: max time value
    """
    if "UNLIMITED" in [x, y]:
        return "UNLIMITED"
    if x in ["", "INVALID"]:
        return y
    if y in ["", "INVALID"]:
        return x
    return max(x, y)

def select_vals(lines, selectors):
    """
    Select sacct or sstat values from multi-line output

    # Arguments
    - lines (list): one list of parsed values per line of output
    - selectors (list): selector functions

    # Returns
    - list: selected sacct or sstat values
    """
    # Extract first line of values
    vals = lines[0]
    # If more lines, run selector functions
    for line in lines[1:]:
        for i, selector in enumerate(selectors):
            vals[i] = selector(vals[i], line[i])
    return vals

# Define formatting functions

def fmt_bytes(x):
    """
    Format bytes

    # Arguments
    - x (float): size in bytes

    # Returns
    - str: formatted size with units
    """
    units = " KMGTPE"
    e = int(math.log(x + 1, 2) / 10)
    return f"{x / 2**(10 * e):.2f}" + units[e]

def fmt_tasks(x):
    """
    Format tasks

    # Arguments
    - x (str): sacct value for ntasks

    # Returns
    - str: "--" (if x is empty)
    - str: x
    """
    # Value is empty if job is PENDING
    if not x:
        return "--"
    return x

def fmt_time(x):
    """
    Format time

    # Arguments
    - x (str): sacct value for time

    # Returns
    - str: "--" (if 0)
    - str: time formatted as (dd-)hh:mm:ss(.sss)
    """
    # Value may be 0 if job is not COMPLETED
    if x == "00:00:00":
        return "--"
    dd, hh, mm, ss = parse_time(x)
    if dd > 0:
        dd = f"{dd}-"
    else:
        dd = ""
    if str(ss).endswith(".0"):
        return f"{dd}{hh:02d}:{mm:02d}:{int(ss):02d}"
    return f"{dd}{hh:02d}:{mm:02d}:{ss:06.3f}"

def fmt_datetime(x):
    """
    Format datetime

    # Arguments
    - x (str): sacct value for datetime

    # Returns
    - str: "--" (if Unknown)
    - str: x
    """
    # Value may be Unknown if job is PENDING or RUNNING
    if x == "Unknown":
        return "--"
    return x

def fmt_maxbytes(x):
    """
    Format estimated max bytes

    # Arguments
    - x (float): estimated max bytes

    # Returns
    - str: "--" (if value is not available)
    - str: formatted bytes
    """
    # Value set to -1.0 if job not started or is RUNNING and not user or root
    if x == -1.0:
        return "--"
    return f"{fmt_bytes(x)} (estimate)"

# Define calculation functions

def cpu_eff(x, y):
    """
    Calculate CPU efficiency

    # Arguments
    - x (str): sacct value for totalcpu
    - y (str): sacct value for cputime

    # Returns
    - str: "--" (if x or y is 0)
    - str: formatted %
    """
    cpu_used = to_seconds(x)
    cpu_elapsed = to_seconds(y)
    # Total CPU time is 0 if job not COMPLETED
    # Elapsed CPU time is 0 if job not started
    if cpu_used == 0 or cpu_elapsed == 0:
        return "--"
    return f"{cpu_used / cpu_elapsed * 100:5.2f}%"

def pct_cpu(x, y):
    """
    Calculate % of total CPU used

    # Arguments
    - x (str): sacct value for usercpu or systemcpu
    - y (str): sacct value for totalcpu

    # Returns
    - str: "--" (if y is 0)
    - str: formatted %
    """
    cpu_used = to_seconds(y)
    # Total CPU time is 0 if job not COMPLETED
    if cpu_used == 0:
        return "--"
    sub_used = to_seconds(x)
    return f"{sub_used / cpu_used * 100:5.2f}%"

def mem_eff(x, y):
    """
    Calculate memory efficiency

    # Arguments
    - x (str): estimated value for max RSS used
    - y (str): sacct value for allocated memory

    # Returns
    - str: "--" (if x is not available)
    - str: formatted %
    """
    # Value set to -1.0 if job not started or is RUNNING and not user or root
    if x == -1.0:
        return "--"
    allocmem = to_bytes(y)
    return f"{x / allocmem * 100:5.2f}%"

# Define primary functions to get and derive job info

def get_sacct_values(jobid, fields):
    """
    Get sacct values and modify as needed

    # Arguments
    - jobid (str): job ID
    - fields (list): sacct fields to query and associated selector functions

    # Returns
    - dict: key-value pairs for sacct fields
    """
    keys = [item[0] for item in fields]
    fmt = ",".join(keys)
    cmd = ["sacct", "-n", "-P", "-o", fmt, "-j", jobid]
    proc = subprocess.run(cmd, capture_output = True, text = True)
    out = proc.stdout.split("\n")[:-1]
    if not out:
        print("Error: no such job", file = sys.stderr)
        sys.exit(1)
    # Output returned from sacct may have multiple lines
    # Jobs that are PENDING will have one line
    # Jobs that are CANCELLED or FAILED before starting will have one line
    # Otherwise, jobs that start will have multiple lines
    # Main job line, .batch or .interactive line, and .extern line
    # If srun is used, one line for each srun call
    # Select one value or combine multiple values depending on field
    # Parse values from each line into list and store in list of lists
    lines = []
    for line in out:
        spl = line.strip().split("|")
        # Skip .extern step (typically not user computation)
        if spl[0].endswith(".extern"):
            continue
        # Modify some values in order to compare or sum
        # Extract max memory used from tresusageintot and convert to bytes
        if not spl[-3]:
            mem = 0
        else:
            mem = re.search(r"mem=([0-9]+.[0-9]+[A-Z]|[0-9]+[A-Z])", spl[-3]).group(1)
        spl[-3] = to_bytes(mem)
        # Convert maxdiskread and maxdiskwrite to bytes
        spl[-2] = to_bytes(spl[-2])
        spl[-1] = to_bytes(spl[-1])
        lines.append(spl)
    # Apply selector functions to parsed output
    selectors = [item[1] for item in fields]
    vals = select_vals(lines, selectors)
    # Store values in dict
    d = dict(zip(keys, vals, strict = True))
    return d

def get_squeue_values(jobid):
    """
    Get squeue values and modify as needed

    # Arguments
    - jobid (str): job ID

    # Returns
    - dict: key-value pairs for squeue fields

    # Notes
    - For job pending reason and dependencies
    """
    cmd = ["squeue", "-h", "-a", "-o", "%R|%E", "-j", jobid]
    proc = subprocess.run(cmd, capture_output = True, text = True)
    out = proc.stdout.strip().split("|")
    if out[1] == "(null)":
        out[1] = ""
    # Store values in dict
    keys = ["pending_reason", "pending_deps"]
    d = dict(zip(keys, out, strict = True))
    return d

def get_sstat_values(jobid):
    """
    Get sstat values and modify as needed

    # Arguments
    - jobid (str): job ID

    # Returns
    - dict: key-value pairs for sstat fields

    # Notes
    - For maxrss, maxdiskread, and maxdiskwrite
    """
    fmt = "jobid,tresusageintot,maxdiskread,maxdiskwrite"
    cmd = ["sstat", "-n", "-P", "-a", "-o", fmt, "-j", jobid]
    proc = subprocess.run(cmd, capture_output = True, text = True)
    out = proc.stdout.split("\n")[:-1]
    # Output returned from sstat will have multiple lines
    # .extern line and .batch or .interactive line
    # If srun is used, one line for each srun call
    # Select one value or combine multiple values depending on field
    # Parse values from each line into list and store in list of lists
    lines = []
    for line in out:
        spl = line.strip().split("|")
        # Skip .extern step (typically not user computation)
        if spl[0].endswith(".extern"):
            continue
        # Modify some values in order to compare or sum
        # Extract max memory used from tresusageintot and convert to bytes
        if not spl[1]:
            mem = 0
        else:
            mem = re.search(r"mem=([0-9]+.[0-9]+[A-Z]|[0-9]+[A-Z])", spl[1]).group(1)
        spl[1] = to_bytes(mem)
        # Convert maxdiskread and maxdiskwrite to bytes
        spl[2] = to_bytes(spl[2])
        spl[3] = to_bytes(spl[3])
        lines.append(spl)
    # Apply selector functions to parsed output (and remove job ID)
    selectors = [first, max, max, max]
    vals = select_vals(lines, selectors)[1:]
    # Store values in dict
    keys = ["maxmem_sstat", "maxdiskread_sstat", "maxdiskwrite_sstat"]
    d = dict(zip(keys, vals, strict = True))
    return d

def derive_values(vals):
    """
    Derive other values from sacct values

    # Arguments
    - vals (dict): key-value pairs for sacct fields

    # Returns
    - dict: key-value pairs for original and derived fields
    """
    d = vals.copy()
    # Add formatted values where needed
    d["ntasks_fmt"] = fmt_tasks(d["ntasks"])
    d["start_fmt"] = fmt_datetime(d["start"])
    d["end_fmt"] = fmt_datetime(d["end"])
    d["elapsed_fmt"] = fmt_time(d["elapsed"])
    d["cputime_fmt"] = fmt_time(d["cputime"])
    d["totalcpu_fmt"] = fmt_time(d["totalcpu"])
    # Format state depending on job state
    if d["state"] == "PENDING":
        squeue_vals = get_squeue_values(d["jobid"])
        d.update(squeue_vals)
        if d["pending_deps"] == "":
            d["state_fmt"] = d["state"] + " " + d["pending_reason"]
        else:
            d["state_fmt"] = d["state"] + " " + d["pending_reason"] + " (" + d["pending_deps"] + ")"
    else:
        d["state_fmt"] = d["state"]
    # Get requested nodes
    d["reqnodes"] = re.search(r"node=([0-9]+)", d["reqtres"]).group(1)
    # Get requested CPUs
    d["reqcpus"] = re.search(r"cpu=([0-9]+)", d["reqtres"]).group(1)
    # Get requested memory (may be in varying units)
    d["reqmem"] = re.search(r"mem=([0-9]+.[0-9]+[A-Z]|[0-9]+[A-Z])", d["reqtres"]).group(1)
    # Get requested GPUs
    reqgpus = re.search(r"gres/gpu=([0-9]+)", d["reqtres"])
    if reqgpus is None:
        d["reqgpus"] = "0"
        d["reqgpumodels"] = "--"
        d["reqgpustr"] = d["reqgpus"]
    else:
        d["reqgpus"] = reqgpus.group(1)
        # Get requested GPU models (typically one but could be multiple)
        reqgpumodels = re.findall(r"gres/gpu:([a-zA-Z0-9]+)", d["reqtres"])
        if not reqgpumodels:
            d["reqgpumodels"] = "--"
            d["reqgpustr"] = d["reqgpus"]
        else:
            d["reqgpumodels"] = ",".join(reqgpumodels)
            d["reqgpustr"] = d["reqgpus"] + " (" + d["reqgpumodels"]  + ")"
    # alloctres is empty if resources have not been allocated
    # If job is PENDING or CANCELLED/FAILED before job started
    if d["alloctres"] == "":
        d["allocnodes"] = "--"
        d["alloccpus"] = "--"
        d["allocmem"] = "--"
        d["allocgpus"] = "--"
        d["allocgpumodels"] = "--"
        d["allocgpustr"] = "--"
    else:
        # Get allocated nodes
        d["allocnodes"] = re.search(r"node=([0-9]+)", d["alloctres"]).group(1)
        # Get allocated CPUs
        d["alloccpus"] = re.search(r"cpu=([0-9]+)", d["alloctres"]).group(1)
        # Get allocated memory (may be in varying units)
        d["allocmem"] = re.search(r"mem=([0-9]+.[0-9]+[A-Z]|[0-9]+[A-Z])", d["alloctres"]).group(1)
        # Get allocated GPUs
        allocgpus = re.search(r"gres/gpu=([0-9]+)", d["alloctres"])
        if allocgpus is None:
            d["allocgpus"] = "0"
            d["allocgpumodels"] = "--"
            d["allocgpustr"] = d["allocgpus"]
        else:
            d["allocgpus"] = allocgpus.group(1)
            # Get allocated GPU models (typically one but could be multiple)
            allocgpumodels = re.findall(r"gres/gpu:([a-zA-Z0-9]+)", d["alloctres"])
            if not allocgpumodels:
                d["allocgpumodels"] = "--"
                d["allocgpustr"] = d["allocgpus"]
            else:
                d["allocgpumodels"] = ",".join(allocgpumodels)
                d["allocgpustr"] = d["allocgpus"] + " (" + d["allocgpumodels"] + ")"
    # Calculate CPU efficiency
    d["cpueff"] = cpu_eff(d["totalcpu"], d["cputime"])
    # Calculate user CPU %
    d["usercpu_pct"] = pct_cpu(d["usercpu"], d["totalcpu"])
    # Calculate system CPU %
    d["systemcpu_pct"] = pct_cpu(d["systemcpu"], d["totalcpu"])
    # Format maxmem, maxdiskread, and maxdiskwrite depending on job state
    if "RUNNING" in d["state"] and (d["user"] == os.environ["USER"] or os.getuid() == 0):
        sstat_vals = get_sstat_values(d["jobid"])
        d.update(sstat_vals)
        d["maxmem"] = d["maxmem_sstat"]
        d["maxmem_fmt"] = fmt_maxbytes(d["maxmem"])
        d["maxdiskread_fmt"] = fmt_maxbytes(d["maxdiskread_sstat"])
        d["maxdiskwrite_fmt"] = fmt_maxbytes(d["maxdiskwrite_sstat"])
    else:
        if re.search(r"PENDING|RUNNING", d["state"]) or d["alloctres"] == "":
            d["maxmem"] = -1.0
        else:
            d["maxmem"] = d["tresusageintot"]
        d["maxmem_fmt"] = fmt_maxbytes(d["maxmem"])
        d["maxdiskread_fmt"] = fmt_maxbytes(d["maxdiskread"])
        d["maxdiskwrite_fmt"] = fmt_maxbytes(d["maxdiskwrite"])
    # Calculate memory efficiency
    d["memeff"] = mem_eff(d["maxmem"], d["allocmem"])
    return d

# Define main function to get job info

def get_job_info(jobid, fields):
    """
    Get job info values

    # Arguments
    - jobid (str): job ID
    - fields (list): sacct fields to query and associated selector functions

    # Returns
    - dict: key-value pairs for job info
    """
    vals = get_sacct_values(jobid, fields)
    vals2 = derive_values(vals)
    return vals2

# Specify sacct fields to query and associated selector functions

fs = [["jobid", first],
      ["jobname", first],
      ["user", first],
      ["account", first],
      ["workdir", first],
      ["cluster", first],
      ["partition", first],
      ["nodelist", first],
      ["ntasks", max],
      ["reqtres", first],
      ["alloctres", first],
      ["state", unique],
      ["exitcode", first],
      ["submit", first],
      ["start", min],
      ["end", max_time],
      ["planned", first],
      ["timelimit", max_time],
      ["elapsed", first],
      ["cputime", first],
      ["totalcpu", first],
      ["usercpu", first],
      ["systemcpu", first],
      ["tresusageintot", max],
      ["maxdiskread", max],
      ["maxdiskwrite", max]]

# Run main function to get job info

v = get_job_info(args.jobid, fs)

# Print table of selected key-value pairs

print("Job ID               | " + v["jobid"])
print("Job Name             | " + v["jobname"])
print("User                 | " + v["user"])
print("Account              | " + v["account"])
print("Working directory    | " + v["workdir"])
print("Cluster              | " + v["cluster"])
print("Partition            | " + v["partition"])
print("State                | " + v["state_fmt"])
print("Exit code            | " + v["exitcode"])
if v["state_fmt"] == "PENDING" or v["alloctres"] == "":
    print("Nodes                | " + v["reqnodes"])
    print("Tasks                | " + v["ntasks_fmt"])
    print("CPUs                 | " + v["reqcpus"])
    print("Memory               | " + v["reqmem"])
    print("GPUs                 | " + v["reqgpustr"])
else:
    print("Nodes                | " + v["allocnodes"])
    print("Tasks                | " + v["ntasks_fmt"])
    print("CPUs                 | " + v["alloccpus"])
    print("Memory               | " + v["allocmem"])
    print("GPUs                 | " + v["allocgpustr"])
print("Nodelist             | " + v["nodelist"])
print("Submit time          | " + v["submit"])
print("Start time           | " + v["start_fmt"])
print("End time             | " + v["end_fmt"])
print("Wait time            | " + v["planned"])
print("Reserved walltime    | " + v["timelimit"])
print("Elapsed walltime     | " + v["elapsed_fmt"])
print("Elapsed CPU walltime | " + v["cputime_fmt"])
print("Used CPU time        | " + v["totalcpu_fmt"])
print("CPU efficiency       | " + v["cpueff"])
print("% User (computation) | " + v["usercpu_pct"])
print("% System (I/O)       | " + v["systemcpu_pct"])
print("Max memory used      | " + v["maxmem_fmt"])
print("Memory efficiency    | " + v["memeff"])
print("Max disk read        | " + v["maxdiskread_fmt"])
print("Max disk write       | " + v["maxdiskwrite_fmt"])
